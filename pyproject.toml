[project]
name = "relativistic-turbulence-rg"
version = "0.1.0"
description = "Renormalization group methods for relativistic Israel-Stewart hydrodynamics"
readme = "README.md"
license = { text = "CC-BY-NC-SA-4.0" }
authors = [
    { name = "Aristos", email = "ai@atoms.eu" }
]
keywords = [
    "physics",
    "relativity",
    "hydrodynamics",
    "turbulence",
    "renormalization-group",
    "field-theory",
    "israel-stewart",
    "scientific-computing"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    "matplotlib>=3.8.0",
    "networkx>=3.5",
    "numba>=0.58.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "sympy>=1.12.0",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "nbsphinx>=0.9.0",
    "jupyter>=1.0.0",
]
all = [
    "relativistic-turbulence-rg[dev,test,docs]"
]

[project.urls]
"Homepage" = "https://github.com/TUstudents/relativistic_turbulence_rg"
"Repository" = "https://github.com/TUstudents/relativistic_turbulence_rg"
"Issues" = "https://github.com/TUstudents/relativistic_turbulence_rg/issues"
"Documentation" = "https://github.com/TUstudents/relativistic_turbulence_rg/tree/master/docs"

[project.scripts]
relativistic-turbulence-rg = "rtrg:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["rtrg"]

[tool.hatch.build.targets.sdist]
include = [
    "rtrg/",
    "tests/",
    "docs/",
    "plan/",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]

# Development tool configurations
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions",
    "benchmark: Benchmark tests against known results",
    "slow: Tests that take more than a few seconds",
    "physics: Tests that validate physics correctness",
    "numerical: Tests for numerical accuracy and stability",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B905",  # zip without explicit strict parameter
    "F841",  # unused variables
    "F401",  # unused imports
    "E731",  # lambda expressions (useful for short functions)
    "E722",  # bare except (sometimes needed for symbolic math)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["F811", "F401", "F841"]  # Allow unused imports and variables in tests

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
disable_error_code = ["unused-ignore", "assignment"]

# Ignore missing imports for external libraries without complete type stubs
[[tool.mypy.overrides]]
module = [
    "sympy.*",
    "matplotlib.*",
    "scipy.*",
    "numba.*",
    "networkx.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["rtrg"]
omit = [
    "tests/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.bandit]
exclude_dirs = ["tests", "benchmarks"]
skips = [
    "B101",  # assert_used - asserts are OK in tests
    "B110",  # try_except_pass - legitimate in numerical computation
    "B112",  # try_except_continue - legitimate in numerical computation
    "B601",  # paramiko_calls - not applicable
    "B602",  # subprocess_popen_with_shell_equals_true - we don't use shell=True
]

[dependency-groups]
dev = [
    "build>=1.3.0",
]
